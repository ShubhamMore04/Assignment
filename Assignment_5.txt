Name :- Shubham Shahikant More

/*5_1_Create a multi-level inheritance , instantiate the child class and observe 
 *    constructor invocation. Also show, if needed how will u invoke parent class constructor 
 *    from child class ?
 */

package Day5_Assign;

class base{
	
	base(int k){
		System.out.println("base param constructor");
		System.out.println(k);
	}
}

class sub extends base{
	
	sub(int n){
		
		super(200);
		System.out.println("sub param constructor");
		System.out.println(n);
	}
}

class sub1 extends sub{
	
	sub1(){
		super(10);
		System.out.println("sub1 default constructor");
	}
	
}

public class task1 {
	
	public static void main(String[] args) {
		
		base s1 = new sub1();		
	}
}
------------------------------------------------------------------------------------------------------------------------------------------------------

/*5_2_create a class "Vehicle", define a method "public void start()" in it. From this class 
 *    derive a class FourWheeler. How will u override "start()" method of parent class ?
 */

package Day5_Assign;

class Vehicle {
	
	int num = 50;
	public void start() {  // Overridden
		
		System.out.println("Speed of the Vehicle is "+num+" kmph.");
	}
	
}

class FourWheeler extends Vehicle{
	
	//int num = 30;
	public void start() {  // Overriding
		
		super.start();
		//System.out.println("Start the Vehicle and run at "+num+" kmph");
		
	}
	
}

public class task2 {
	
	public static void main(String[] args) {
		
		FourWheeler f1 = new FourWheeler();
		f1.start();
	}
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------

/*5_3_Go for Hierarchical inheritance, create instances of child class and observe 
 *    constructor invocation.
 */

package Day5_Assign;

class person {
	
	person()
	{
		System.out.println("Person is Parent");
	}

}

class student extends person {
	
	student()
	{
		System.out.println("Student is going to the School");
	}
	
}

class employee extends person {
	
	employee()
	{
		System.out.println("Employee is Working in the Office");
	}	
}

public class task3 {
	
	public static void main(String[] args) {
		
		employee e1 = new employee();
		student s1 = new student();
	}

}
--------------------------------------------------------------------------------------------------------------------------------------------------

/*5_4_Create a class "Top1" with "disp1()" method.
      From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
      Now show how will u achieve dynamic polymorphism.
*/

package Day5_Assign;

class Top1 {
	
	void disp1()
	{
		System.out.println("class Top1 is Parent Class");
	}
}

class Bottom1 extends Top1 {
	
	void disp1()
	{
		System.out.println("class Bottom1 extends Top1");
	}
}

class Bottom2 extends Top1 {
	
	void disp1()
	{
		System.out.println("class Bottom2 extends Top1");
	}
}

class Bottom3 extends Top1{
	
	void disp1()
	{
		System.out.println("class Bottom3 extends Top1");
	}
}
public class task4 {

	public static void main(String[] args) {
		
		Top1 b1 = new Bottom1();
		b1.disp1();
		Top1 b2 = new Bottom2();
		b2.disp1();
		Top1 b3 = new Bottom3();
		b2.disp1();

	}

}
----------------------------------------------------------------------------------------------------------------------------------------------------------------

/*5_5_create abstract class Shape. declare "draw()" function as abstract. From this class 
      define "Triangle","Polygon" and "Circle" .
      create an array of Shape having 3 elements.
      store child objects into this array . and call their draw function.
*/

package Day5_Assign;

abstract class Shape{
	
	abstract void draw();	
}

class Triangle extends Shape{
	
	void draw()
	{
		System.out.println("Drawing a Triangle");
	}
}

class Polygon extends Shape{
	
	void draw()
	{
		System.out.println("Drawing a Polygon");
	}
}

class Circle extends Shape{
	
	void draw()
	{
		System.out.println("Drawing a Circle");
	}
}

public class task5 {

	public static void main(String[] args) {
		
		Shape arr [] = new Shape [3];
		arr [0] = new Triangle();
		arr [1] = new Polygon();
		arr [2] = new Circle();
		
		for (int i=0; i<arr.length; i++) {
			arr[i].draw();
		}

	}

}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/*5_6_Define interface "A" with "disp1()" method.
      Derive from "A", interface "B" with "disp2" method.
      Derive class "C" , from "B".
      Instantiate class "C" and call its members as well as derived from parent interfaces.
*/

package Day5_Assign;

interface A{
	
	void disp1();	
}

interface B extends A {
	
	void disp2();
}

class C implements B {
	
	public void disp1() 
	{	
	    System.out.println("Inside A");	
	}
	
	public void disp2()
	{
		System.out.println("Inside B");
	}	
}

public class task6 {

	public static void main(String[] args) {
		
		C c1 = new C();
		c1.disp1();
		c1.disp2();
	}
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

/*5_7_Define class "Parent1" with some data.
      Define interface "Parent2" with some methods.
      Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.
*/

package Day5_Assign;

class parent1 {
	
	int num = 50;
	
	void disp() 
	{
		System.out.println(num);
	}
}

interface parent2 {
	
	void disp1();	
}

class child extends parent1 implements parent2 {
	            
	public void disp1()
	{
		System.out.println("Inside Child");
	}
}
	
public class task7 {
	
	public static void main(String[] args) {
		
		child c1 = new child ();
		c1.disp();
		c1.disp1();
	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------

/*5_8_Define a class "base1" with only parameterized constructor.
      Derive a class "sub1" from "base1". This class should have following constructors
	  a) Default
	  b) one parameter
	  c) two parameter
      Now try to instantiate "sub1" , using any of the above mentioned constructors.
*/

package Day5_Assign;

class base1 {
	
	base1(int n)
	{   
		System.out.println("base1 default constructor "+n);
	}
}

class sub2 extends base1 {
	
	sub2()
	{   
		super(200);
		System.out.println("sub1 default constructor");
	}
	
	sub2(int m)
	{
		super(500);
		System.out.println("sub1 one param constructor "+m);
	}
	
	sub2(int num1, int num2)
	{   
		super(800);
		System.out.println("sub1 two param constructor"+num1+" "+num2);
	}
}

public class task8 {

	public static void main(String[] args) {
		
		sub2 s1 = new sub2();
		sub2 s2 = new sub2(50);
		sub2 s3 = new sub2(100, 200);
	}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/*
5_9_create interface "Game" , have an abstract method "play()". from this interface implements classes like "Cricket" , 
    "FootBall" and "Tennis".
    Now Define one more class 
    public class Demo with main function.
    In this class have a static method "perform" which will take interface reference as parameter.inside "perform()" see to 
    it that any child object passed ,its "play()" method should be invoked. Call "perform()" method from main function.
 */

package Day5_Assign;

interface Game{
	
	abstract void play();
}

class Cricket implements Game {

	@Override
	public void play() {
		
		System.out.println("Playing Cricket");
	}
}

class Football implements Game {

	@Override
	public void play() {
		
		System.out.println("Playing Football");
	}
	
}

class Tennis implements Game {

	@Override
	public void play() {
		
		System.out.println("Playing Tennis");
	}
}

public class task9 {
	
	static void perform(Game ref) 
	{
		ref.play();
	}
	
	public static void main(String[] args) {
		
		perform(new Cricket());
		perform(new Football());
		perform(new Tennis());
	}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

